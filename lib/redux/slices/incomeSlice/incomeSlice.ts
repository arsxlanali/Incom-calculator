/* Core */
import { createSlice, type PayloadAction } from "@reduxjs/toolkit";
import { getRecentYears, getMonths } from "@/app/utils";

/* Instruments */
// import { incrementAsync } from "./thunks";

const initialState: CounterSliceState = {
  value: 0,
  status: "idle",
  years: getRecentYears(),
  months: getMonths(),
  selectedOptions: {
    toYear0: "",
    toMonth0: "",
    fromYear0: "",
    fromMonth0: "",
  },
  // isFieldSelected: true,
  disabledKeys: 
    {
    },
};

export const incomeSlice = createSlice({
  name: "income",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setOptions: (state, action: PayloadAction<SelectedOptions>) => {
      state.selectedOptions = action.payload;
    },
    setDisableKeys: (state, action: PayloadAction<SetDisableAction>) => {
      state.disabledKeys = {...action.payload, ...state.disabledKeys};
    },
    // addDiableKeys: (state) => {
    //   state.disabledKeys = {
    //     fromMonth: [],
    //     disablefromYear: [],
    //     disabletoMonth: [],
    //     disabletoYear: [],
    //   };
    // },
    // setSelected: (state, action: PayloadAction<boolean>) => {
    //   state.isFieldSelected = action.payload;
    // },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  // extraReducers: (builder) => {
  //   builder
  //     .addCase(incrementAsync.pending, (state) => {
  //       state.status = "loading";
  //     })
  //     .addCase(incrementAsync.fulfilled, (state, action) => {
  //       state.status = "idle";
  //       state.value += action.payload;
  //     });
  // },
});

export const { setOptions, setDisableKeys } =
  incomeSlice.actions;
