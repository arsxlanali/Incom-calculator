import { createSlice, type PayloadAction, current } from "@reduxjs/toolkit";
import { getRecentYears, getMonths } from "@/app/utils";

const initialState: CounterSliceState = {
  value: 0,
  status: "idle",
  years: getRecentYears(),
  months: getMonths(),
  selectedOptions: {
    toYear0: "",
    toMonth0: "",
    fromYear0: "",
    fromMonth0: "",
    price0: "",
  },
  disabledKeys: {},
};

export const incomeSlice = createSlice({
  name: "income",
  initialState,
  reducers: {
    setOptions: (state, action: PayloadAction<SelectedOptions>) => {
      state.selectedOptions = action.payload;
    },
    setDisableKeys: (state, action: PayloadAction<SetDisableAction>) => {
      state.disabledKeys = { ...state.disabledKeys, ...action.payload };
    },
    updatePrice: (state, action) => {
      const { index, value } = action.payload;
      // Assuming you want to update price for the selectedOptions0
      state.selectedOptions[`price${index}`] = value;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  // extraReducers: (builder) => {
  //   builder
  //     .addCase(incrementAsync.pending, (state) => {
  //       state.status = "loading";
  //     })
  //     .addCase(incrementAsync.fulfilled, (state, action) => {
  //       state.status = "idle";
  //       state.value += action.payload;
  //     });
  // },
});

export const { setOptions, setDisableKeys, updatePrice } = incomeSlice.actions;
